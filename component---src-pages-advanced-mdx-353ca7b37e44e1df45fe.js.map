{"version":3,"sources":["webpack:///./src/pages/advanced.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","Layout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+QAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,oDACA,mKACsD,0BAAYC,WAAW,KAAvB,WADtD,SAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0aAqBL,gCAAe,0BAAYA,WAAW,KAAvB,WAAf,gIAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4VAiBL,mCACA,qBAAG,0BAAYA,WAAW,KAAvB,aAAH,iBAA0E,0BAAYA,WAAW,KAAvB,MAA1E,4DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,WACd,UAAY,IAHX,+FAUL,qBAAG,sBAAQA,WAAW,KAAnB,+DAAH,6JAEiC,0BAAYA,WAAW,KAAvB,MAFjC,mFAG8B,0BAAYA,WAAW,KAAvB,WAH9B,YAIA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iFAML,2CACA,8WAIU,0BAAYA,WAAW,KAAvB,YAJV,yCAKA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iJAcL,iEAAgD,0BAAYA,WAAW,KAAvB,OAAhD,8EAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+DAOL,kCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0HAUL,uDACA,6PAGA,8BACE,iBAAGA,WAAW,cAAd,2FACJ,+BAAGA,WAAW,KAAQ,CACd,KAAQ,4BADhB,6BAIE,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4TAqBL,sEACA,iOAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mmBAmCL,mRAGA,wQAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wbAsBL,8CACA,sCAAqB,0BAAYA,WAAW,KAAvB,OAArB,sHACoE,+BAAGA,WAAW,KAAQ,CACtF,KAAQ,kDADwD,qBADpE,MAIA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sFAUL,6BAAY,+BAAGA,WAAW,KAAQ,CAC9B,KAAQ,8CADA,kBAAZ,0FAIA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kQAmBTJ,EAAWK,gBAAiB","file":"component---src-pages-advanced-mdx-353ca7b37e44e1df45fe.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Layout from '../components/Layout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Attaching Additional Props`}</h2>\n    <p>{`A common task with styled components is to map their props or set default values.\nastroturf cribs from Styled Components, by including an `}<inlineCode parentName=\"p\">{`attrs()`}</inlineCode>{` api.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import styled from 'astroturf/react';\n\n// Provide a default \\`type\\` props\nconst PasswordInput = styled('input').attrs({\n  type: 'password',\n})\\`\n  background-color: #ccc;\n\\`;\n\n// Map the incoming props to a new set of props\nconst TextOrPasswordInput = styled('input').attrs(\n  ({ isPassword, ...props }) => ({\n    ...props,\n    type: isPassword ? 'password' : 'text',\n  }),\n)\\`\n  background-color: #ccc;\n\\`;\n`}</code></pre>\n    <p>{`Because `}<inlineCode parentName=\"p\">{`attrs()`}</inlineCode>{` is resolved during render you can use hooks in them! We even\ndo some magic in the non-function signature so that it works.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const Link = styled('a').attrs((props) => ({\n  href: useRouter().createHref(props.to),\n}))\\`\n  color: blue;\n\\`;\n\n// astroturf will automatically compile to a function\n// when using a plain object so that the hooks\n// are only evaluated during render\nconst Link = styled(MyLink).attrs({\n  router: useRouter(),\n})\\`\n  color: blue;\n\\`;\n`}</code></pre>\n    <h2>{`\"as\" prop`}</h2>\n    <p><inlineCode parentName=\"p\">{`astroturf`}</inlineCode>{` supports the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop to control the underlying element type at runtime.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"noFormat\",\n        \"noFormat\": true\n      }}>{`const Button = styled('button')\\`\n  color: red;\n\\`;\n\n<Button as=\"a\" href=\"#link\" />;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`This feature is only enabled by default for host components`}</strong>{`, e.g. native DOM elements.\nWe do this to prevent annoying conflicts with other UI libraries like react-bootstrap or\nsemantic-ui which also use the the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop. If you want to enable it for any styled\ncomponent you can do so via the `}<inlineCode parentName=\"p\">{`allowAs`}</inlineCode>{` option.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const StyledFooter = styled(Footer, { allowAs: true })\\`\n  color: red;\n\\`;\n`}</code></pre>\n    <h2>{`Class composition`}</h2>\n    <p>{`How you accomplish that is mostly up to your preprocessor. Leverage Sass variables,\nor Less mixins, or postcss nesting polyfills, or whatever. The css you're writing\nis treated exactly like a normal style file so all the tooling you're used to works as expected.\nFor composition, specifically around classes, you can also use\ncss-modules `}<inlineCode parentName=\"p\">{`composes`}</inlineCode>{` to compose styles and interpolation;`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Button.js\n\nconst heavy = css\\`\n  font-weight: 900;\n\\`;\n\nconst Title = styled('h3')\\`\n  composes: \\${heavy};\n\n  font-size: 12%;\n\\`;\n`}</code></pre>\n    <p>{`You don't have to define everything in a `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file. Where it makes sense\njust use normal css (or any other file type).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// mixins.scss\n@mixin heavy() {\n  font-weight: 900;\n}\n`}</code></pre>\n    <p>{`and then:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Button.js\nconst Title = styled('h3')\\`\n  @import './mixins.scss';\n\n  @include heavy();\n  font-size: 12%;\n\\`;\n`}</code></pre>\n    <h2>{`Referring to other Components`}</h2>\n    <p>{`One limitation to fully encapsulated styles is that it's hard to contextually style components\nwithout them referencing each other. In astroturf you can use a component in a\nselector as if it were referencing a class selector.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: Referencing stylesheets or styled components from other files has a few caveats:\n`}<a parentName=\"p\" {...{\n          \"href\": \"cross-file-dependencies\"\n        }}>{`cross-file-dependencies`}</a></p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const Link = styled('a')\\`\n  display: flex;\n  align-items: center;\n  padding: 5px 10px;\n  background: papayawhip;\n  color: palevioletred;\n\\`;\n\nconst Icon = styled('svg')\\`\n  flex: none;\n  transition: fill 0.25s;\n  width: 48px;\n  height: 48px;\n\n  \\${Link}:hover & {\n    fill: rebeccapurple;\n  }\n\\`;\n`}</code></pre>\n    <h2>{`Sharing values between styles and JavaScript`}</h2>\n    <p>{`We've found that in practice, you rarely have to share values between the two, but there are times when it's\nvery convenient. Astroturf ofters two ways to do this, the first is string interpolations.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const DURATION = 500;\n\nconst ColorTransition = styled('nav')\\`\n  color: red;\n  transition: color \\${DURATION}ms;\n\n  &.blue {\n    color: blue;\n  }\n\\`;\n\nclass App extends React.Component {\n  state = { blue: false };\n  toggle = () => {\n    this.setState(\n      (s) => ({ blue: !s.blue }),\n      () => {\n        setTimeout(() => console.log('done!'), DURATION);\n      },\n    );\n  };\n\n  render() {\n    const { blue } = this.state;\n    return (\n      <div>\n        <ColorTransition blue={blue} />\n        <button onClick={this.toggle}>Toggle Color</button>\n      </div>\n    );\n  }\n}\n`}</code></pre>\n    <p>{`This works great for local variables, since the compiler can determine their\nvalue at compile time and share them. For cases when you want to share things\na bit more globally, such as in a theme, we recommend leaning on your css preprocesser again.`}</p>\n    <p>{`css-modules provides a syntax for exporting values from styles, generally\nthis is used for class names, but you can leverage it for whatever values you want.\nCombined with something like Sass's variables it ends up being a powerful tool.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const breakpointValues = css\\`\n  @import '../styles/theme';\n\n  :export {\n    @each $breakpoint, $px in $grid-breakpoints {\n      #{$breakpoint}: $px;\n    }\n  }\n\\`;\n\nfunction Responsive() {\n  const [isMobile, setIsMobile] = useState(false);\n\n  useLayoutEffect(() => {\n    setIsMobile(window.clientWidth < parseInt(breakpoints.md, 10));\n  }, []);\n\n  return <div>{isMobile ? 'A small screen!' : 'A big screen!'}</div>;\n}\n`}</code></pre>\n    <h2>{`Keyframes and global`}</h2>\n    <p>{`Everything in `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` will be used as normal CSS Modules styles.\nSo, if you need to insert some CSS without isolation (like reset with `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/csstools/postcss-normalize\"\n      }}>{`postcss-normalize`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`css\\`\n  @import-normalize;\n\n  :global(.btn) {\n    background: blue;\n  }\n\\`;\n`}</code></pre>\n    <p>{`With `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/postcss/postcss-nested\"\n      }}>{`postcss-nested`}</a>{` you can\nadd keyframes to specific component (and keyframes name will not be global):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const Loader = styled('div')\\`\n  animation-name: rotation;\n  animation-duration: 1s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n\n  @keyframes rotation {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\\`;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
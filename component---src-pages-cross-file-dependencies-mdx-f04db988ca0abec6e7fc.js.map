{"version":3,"sources":["webpack:///./src/pages/cross-file-dependencies.mdx"],"names":["name","_frontmatter","Brand","props","console","warn","layoutProps","MDXLayout","Layout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"+QAMO,IAEeA,EAFTC,EAAe,GAOtBC,GALgBF,EAKM,QALE,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,iDACA,YAACT,EAAD,CAAOS,QAAQ,SAAf,aAJK,oEAML,qBAAG,sBAAQC,WAAW,KAAnB,qBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+NAeL,yEAAwD,0BAAYA,WAAW,KAAvB,YAAxD,kGAEA,2GACQ,YAACV,EAAD,CAAOS,QAAQ,SAAf,aADR,4GAE4C,kBAAIC,WAAW,KAAf,QAF5C,mHAIA,2CAA0B,0BAAYA,WAAW,KAAvB,UAA1B,gDAA6H,0BAAYA,WAAW,KAAvB,aAA7H,gCAEA,qBAAG,sBAAQA,WAAW,KAAnB,cACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2HAUL,gGAA+E,0BAAYA,WAAW,KAAvB,UAA/E,kFAC0E,0BAAYA,WAAW,KAAvB,UAD1E,+CAEuC,0BAAYA,WAAW,KAAvB,iBAFvC,SAE0G,kBAAIA,WAAW,KAAf,aAF1G,0CAIA,2CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qCAIL,sCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uCAIL,+CAA8B,0BAAYA,WAAW,KAAvB,aAA9B,yCAA6H,0BAAYA,WAAW,KAAvB,YAA7H,oFAEF,0BAAYA,WAAW,KAAvB,mDAFE,iBAOJH,EAAWI,gBAAiB","file":"component---src-pages-cross-file-dependencies-mdx-f04db988ca0abec6e7fc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Layout from '../components/Layout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Brand = makeShortcode(\"Brand\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Cross File Dependencies`}</h1>\n    <Brand mdxType=\"Brand\">astroturf</Brand> allows targeting other styled components, or stylesheet\nmodules.\n    <p><strong parentName=\"p\">{`ButtonToolbar.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import styled from 'astroturf/react';\n\nimport Button from './Button';\n\nconst ButtonToolbar = styled('div')\\`\n  display: inline-flex;\n  align-items: center;'\n\n  & > \\${Button} {\n    margin-right: 3rem;\n  }\n\\`;\n`}</code></pre>\n    <p>{`Under the hood this makes use of the css-modules `}<inlineCode parentName=\"p\">{`composes`}</inlineCode>{` feature to import\ncss classes from other files and compose them into the new class selector.`}</p>\n    <p>{`Rather than try and track exports of style sheets and styled components\ndirectly, `}<Brand mdxType=\"Brand\">{`astroturf`}</Brand>{` uses a simple naming convention to map imports to styles\nin other modules. In particular, the imported `}<em parentName=\"p\">{`name`}</em>{` of a styled component should\nbe the exactly the same as the name assigned to the component in it's host file.`}</p>\n    <p>{`Take the import of `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` in the example above. The implementation of `}<inlineCode parentName=\"p\">{`Button.js`}</inlineCode>{` looks\nsomething like this:`}</p>\n    <p><strong parentName=\"p\">{`Button.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import styled from 'astroturf/react';\n\nconst Button = styled('button')\\`\n  /* ... */\n\\`;\n\nexport default Button;\n`}</code></pre>\n    <p>{`Notice that the styled component here is assigned to the variable named `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`.\nastroturf uses this information to identify the extracted style by the name `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`.\nIn order to reference this componennt in `}<inlineCode parentName=\"p\">{`ButtonToolbar`}</inlineCode>{` it's `}<em parentName=\"p\">{`important`}</em>{` that it's\nimported as the same name.`}</p>\n    <p>{`so this will work:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Button from './Button';\n`}</code></pre>\n    <p>{`Whereas this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import MyButton from './Button';\n`}</code></pre>\n    <p>{`will not work, because `}<inlineCode parentName=\"p\">{`Button.js`}</inlineCode>{` has no style identified by the name: `}<inlineCode parentName=\"p\">{`MyButton`}</inlineCode>{`.\nThe same logic also applies to named exports, and even allows aliasing, e.g.\n`}<inlineCode parentName=\"p\">{`import { Button as BaseButton } from './Button'`}</inlineCode>{` would work.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{VZl3:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return c}));n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("91GP"),n("q1tI");var a=n("7ljp"),s=n("soUV");var o,r={},l=(o="Brand",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",e)}),i={_frontmatter:r},b=s.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,["components"]);return Object(a.b)(b,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",null,"Getting set up"),Object(a.b)(l,{mdxType:"Brand"},"astroturf")," is quick and easy to get going with. webpack is the tool of choice when it comes to astroturf, but we do have options if it's not your cup of tea.",Object(a.b)("h3",null,"Basic configuration"),Object(a.b)("p",null,"This is all the webpack setup necessary:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"noFormat",noFormat:!0}),"{\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.jsx?$/,\n        use: ['babel-loader', 'astroturf/loader'],\n      },\n    ],\n  }\n}\n")),Object(a.b)("p",null,"Simply add the ",Object(a.b)("inlineCode",{parentName:"p"},"astroturf/loader")," to the end of your JavaScript or TypeScript loader\nchain and you are ready to get compilin'!"),Object(a.b)("p",null,"If you want to use astroturf with a CSS preprocessor, just tweak an option to output\nthe file type of your choice. Here's an example using Sass:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"noFormat",noFormat:!0}),"{\n  module: {\n    rules: [\n      {\n        test: /\\.scss$/,\n        use: ['style-loader', 'css-loader', 'sass-loader'],\n      },\n      {\n        test: /\\.jsx?$/,\n        use: [\n          'babel-loader',\n          {\n            loader: 'astroturf/loader',\n            options: { extension: '.module.scss' },\n          },\n        ],\n      },\n    ],\n  }\n}\n")),Object(a.b)("p",null,"Becauase astroturf outputs CSS modules, it's best to use a ",Object(a.b)("inlineCode",{parentName:"p"},".module.*")," extension. This\nautomatically tells webpack's ",Object(a.b)("inlineCode",{parentName:"p"},"css-loader")," to process the stlyes correctly and expose the\nclass names as exports for JS files. You can use whatever extension you like though, but\nmay need to manually configure CSS modules elsewhere."),Object(a.b)(l,{mdxType:"Brand"},"astroturf")," is right-sized for you and your needs. Quickly tweak behavior based on easy to use configuration options.",Object(a.b)("h2",null,"Options"),Object(a.b)("p",null,"Most options are available anywhere ",Object(a.b)(l,{mdxType:"Brand"},"astroturf")," is used. Specify them\nvia your ",Object(a.b)("inlineCode",{parentName:"p"},"webpack.config")," or ",Object(a.b)("inlineCode",{parentName:"p"},"babelrc")," depending on use and need."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"extension"),": (default: ",Object(a.b)("inlineCode",{parentName:"p"},"'.module.css'"),") the extension used for extracted style files. ",Object(a.b)("inlineCode",{parentName:"p"},"extension")," generally informs the\nflavor of CSS used (Sass, Less, etc) for the CLI or bundler to further process to plain css.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"stylesheetTagName"),": (default: ",Object(a.b)("inlineCode",{parentName:"p"},"'stylesheet'"),") The tag identifier used to '\nlocate inline stylesheets declarations.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"cssTagName"),": (default: ",Object(a.b)("inlineCode",{parentName:"p"},"'css'"),") The tag identifier used to locate inline\ncss literals and extract them.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"styledTagName"),": (default: ",Object(a.b)("inlineCode",{parentName:"p"},"'styled'"),") The tag identifier used to locate components.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"enableCssProp"),": (default: ",Object(a.b)("inlineCode",{parentName:"p"},"true"),") compiles ",Object(a.b)(l,{mdxType:"Brand"},"React.JSâ„¢")," ",Object(a.b)("inlineCode",{parentName:"p"},"css"),"\ncomponent props to styled components.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"enableDynamicInterpolations"),": (default: ",Object(a.b)("inlineCode",{parentName:"p"},"'cssProp'"),") enables or disables custom value\ninterpolation, You can disable this feature if you need to target environments that\ndo not support CSS custom properties.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"experiments"),": Opt in to any experimental features we are testing out."),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"experiments.modularCssExternals"),": Set the css-modules flavor to ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://m-css.com/"}),Object(a.b)("inlineCode",{parentName:"a"},"modular-css"))," which provides\nbetter inter-component referencing than the vanilla css-modules. ",Object(a.b)("strong",{parentName:"li"},"requires css-module-loader to be configured"))))),Object(a.b)("h2",null,"Configuration File"),Object(a.b)(l,{mdxType:"Brand"},"astroturf")," also supports configuration via localized configuration files. We recommend that dependencies using astroturf use this approach to avoid needing an single application-wide set of configuration options.",Object(a.b)("p",null,"The supported file types are:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},".astroturfrc")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},".astroturfrc.json"))),Object(a.b)("p",null,"Both are assumed to JSON (with comments don't worry). You can also add configuration\nto the ",Object(a.b)("inlineCode",{parentName:"p"},"astroturf")," key in your ",Object(a.b)("inlineCode",{parentName:"p"},"package.json"),"."),Object(a.b)("h2",null,"Other Tools"),Object(a.b)("h3",null,"Use with Parcel"),Object(a.b)("p",null,"Add these lines to ",Object(a.b)("inlineCode",{parentName:"p"},"package.json")," to work with ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://parceljs.org/"}),"Parcel")," builder:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-json",metastring:"noFormat",noFormat:!0}),'  "postcss": {\n    "modules": true,\n    "plugins": [\n      "postcss-nested"\n    ]\n  },\n  "babel": {\n    "plugins": [\n      "astroturf/plugin"\n    ]\n  },\n')),Object(a.b)("h3",null,"Use with Rollup"),Object(a.b)("p",null,"Add ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/rollup/plugins/tree/master/packages/babel"}),"babel")," and ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/egoist/rollup-plugin-postcss"}),"postcss")," plugins to ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://rollupjs.org/"}),"Rollup")," config file:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js",metastring:"noFormat",noFormat:!0}),"plugins: [\n  babel({\n    plugins: ['astroturf/plugin'],\n  }),\n  postcss({\n    extract: 'app.css',\n    modules: true,\n    plugins: [postcssNested],\n  }),\n];\n")),Object(a.b)("p",null,"See ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://repl.it/@vladshcherbin/rollup-astroturf#rollup.config.js"}),"example repl")),Object(a.b)("h3",null,"Use with Gatsby"),Object(a.b)("p",null,"See ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/silvenon/gatsby-plugin-astroturf"}),"gatsby-plugin-astroturf")),Object(a.b)("h3",null,"Use with Preact"),Object(a.b)("p",null,"Add these lines to ",Object(a.b)("inlineCode",{parentName:"p"},"package.json")," to work with ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://preactjs.com/"}),"Preact"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-json",metastring:"noFormat",noFormat:!0}),'  "browser": {\n    "react": "preact"\n  },\n')),Object(a.b)("h3",null,"Use with Next.js"),Object(a.b)("p",null,"See ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/zeit/next.js/tree/canary/examples/with-astroturf"}),"example")),Object(a.b)("h3",null,"Use without webpack"),Object(a.b)("p",null,"If you aren't using webpack and still want to define styles inline, there is a babel preset for quickly configuring astroturf."),Object(a.b)("p",null,"Config shown below with the default options."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"// babelrc.js\nmodule.exports = {\n  presets: [\n    [\n      'astroturf/preset',\n      {\n        cssTagName: 'css',\n        extension: '.module.css',\n        writeFiles: true, // Writes css files to disk using the result of `getFileName`\n        getFileName(hostFilePath, pluginsOptions) {\n          const basepath = join(\n            dirname(hostFilePath),\n            basename(hostFilePath, extname(hostFilePath)),\n          );\n          return `${basepath}__extracted_style${opts.extension}`;\n        },\n      },\n    ],\n  ],\n};\n")),Object(a.b)("p",null,"The extracted styles are also available on the ",Object(a.b)("inlineCode",{parentName:"p"},"metadata")," object returned from ",Object(a.b)("inlineCode",{parentName:"p"},"babel.transform"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const { metadata } = babel.transformFile(myJsfile);\n\nmetadata['astroturf'].styles; // [{ path, value }]\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-setup-mdx-0602e9aa24868efe01ac.js.map
{"version":3,"sources":["webpack:///./src/pages/introduction.mdx"],"names":["name","_frontmatter","Brand","props","console","warn","layoutProps","MDXLayout","Layout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"iRAMO,IAEeA,EAFTC,EAAe,GAOtBC,GALgBF,EAKM,QALE,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,4CACA,qBACF,YAACT,EAAD,CAAOS,QAAQ,SAAf,aADE,kIAIA,sBACE,kBAAIC,WAAW,MAAK,sBAAQA,WAAW,MAAnB,2BAApB,6MAGA,kBAAIA,WAAW,MAAf,6BAAkD,sBAAQA,WAAW,MAAnB,uBAAlD,uEAEA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,sCAApB,qFAGF,+BACA,kCAAiB,YAACV,EAAD,CAAOS,QAAQ,SAAf,aAAjB,sJAE4B,kBAAIC,WAAW,KAAf,OAF5B,KAGA,4CACA,gDAA+B,YAACV,EAAD,CAAOS,QAAQ,SAAf,eAA/B,sHAEA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,wlBAiCL,uHAEA,kDAAiC,YAACV,EAAD,CAAOS,QAAQ,SAAf,WAAjC,iBAA6F,0BAAYC,WAAW,KAAvB,OAA7F,mCACW,0BAAYA,WAAW,KAAvB,OADX,oCAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gRAeL,4CAA2B,0BAAYA,WAAW,KAAvB,OAA3B,mCAA8G,0BAAYA,WAAW,KAAvB,QAA9G,0FAEA,oCACA,2DAA0C,YAACV,EAAD,CAAOS,QAAQ,SAAf,aAA1C,oDACwB,YAACT,EAAD,CAAOS,QAAQ,SAAf,aADxB,mBACwF,0BAAYC,WAAW,KAAvB,OADxF,gFAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6TAoBL,mCAAkB,0BAAYA,WAAW,KAAvB,aAAlB,qFAEA,+CACA,6DAA4C,YAACV,EAAD,CAAOS,QAAQ,SAAf,aAA5C,mSAKA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,yTAmBL,4CACA,mEAAkD,YAACV,EAAD,CAAOS,QAAQ,SAAf,aAAlD,4DACqC,0BAAYC,WAAW,KAAvB,OADrC,gDAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oYAuBL,mCAAkB,0BAAYA,WAAW,KAAvB,OAAlB,0HAEA,wCACA,mHACM,YAACV,EAAD,CAAOS,QAAQ,SAAf,aADN,yBAC4E,YAACT,EAAD,CAAOS,QAAQ,SAAf,uBAD5E,2BAEoB,0BAAYC,WAAW,KAAvB,UAFpB,YAGA,0GACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0TAoBL,4BAAW,0BAAYA,WAAW,KAAvB,UAAX,8JACiF,0BAAYA,WAAW,KAAvB,KADjF,2CAEoC,0BAAYA,WAAW,KAAvB,cAFpC,YAEuG,0BAAYA,WAAW,KAAvB,eAFvG,KAGA,4HAKJH,EAAWI,gBAAiB","file":"component---src-pages-introduction-mdx-97c99f1f44f6f65b788d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Layout from '../components/Layout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Brand = makeShortcode(\"Brand\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Intro to astroturf`}</h1>\n    <p>\n  <Brand mdxType=\"Brand\">astroturf</Brand> lets you write CSS in your JavaScript files without\n  adding any runtime layer, and with your existing CSS processing pipeline.\n    </p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Zero runtime CSS-in-JS.`}</strong>{` Get many of the same benefits as CSS-in-JS,\nbut without the loss of flexibility in requiring framework-specific CSS\nprocessing, and while keeping your CSS fully static with no runtime style parsing.`}</li>\n      <li parentName=\"ul\">{`Use your existing tools – `}<strong parentName=\"li\">{`Sass, PostCSS, Less`}</strong>{` – but still write\nyour style definitions in your JavaScript files`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Whole component in the single file`}</strong>{`. Write CSS in a template literal,\nthen use it as if it were in a separate file`}</li>\n    </ul>\n    <h2>{`Usage`}</h2>\n    <p>{`A goal of `}<Brand mdxType=\"Brand\">{`astroturf`}</Brand>{` is to provide approachable,\nscoped, and managable CSS according to everyone's level of comfort. Pick the level of\nabstraction that is right for `}<em parentName=\"p\">{`you`}</em>{`!`}</p>\n    <h3>{`Scoped StyleSheets`}</h3>\n    <p>{`Leveraging the magic of `}<Brand mdxType=\"Brand\">{`COMPILATION`}</Brand>{`, astroturf lets you define styles\nfrom the comfort of your JavaScript (or TypeScript) files; Framework optional!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { stylesheet } from 'astroturf';\n\nconst height = 2;\n\nconst styles = stylesheet\\`\n  .btn {\n    appearance: none;\n    height: \\${height}rem;\n    display: inline-block;\n    padding: .5rem 1rem;\n  }\n\n  .primary {\n    color: white:\n    border: 1px solid white;\n    background-color: taupe;\n\n    &:hover {\n      color: taupe:\n      border-color: taupe;\n      background-color: white;\n    }\n  }\n\\`;\n\nconst Button = ({ primary }) => {\n  const button = document.createElement('button');\n  button.classList.add(styles.btn, primary && styles.primary);\n  return button;\n};\n`}</code></pre>\n    <p>{`Through our proprietary \"Extraction Process\" each stylesheet is\nturned into its own CSS file.`}</p>\n    <p>{`For those who like a more `}<Brand mdxType=\"Brand\">{`MODULAR`}</Brand>{` approach the `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` tag is ready and\nwaiting. The `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` tag creates single CSS classes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport { css } from 'astroturf';\n\nconst btn = css\\`\n  color: black;\n  border: 1px solid black;\n  background-color: white;\n\\`;\n\nexport default function Button({ children }) {\n  return <button className={btn}>{children}</button>;\n}\n`}</code></pre>\n    <p>{`When processed, the `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` block will be extracted into a `}<inlineCode parentName=\"p\">{`.css`}</inlineCode>{` file,\ntaking advantage of any and all of the other loaders configured to handle css.`}</p>\n    <h2>{`React.JS™!`}</h2>\n    <p>{`Embracing the component lifestyle? `}<Brand mdxType=\"Brand\">{`astroturf`}</Brand>{` has you covered with\nbuilt-in integration with `}<Brand mdxType=\"Brand\">{`React.JS™`}</Brand>{`. The versatile `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` tag helps\ntransform your plain ol' components into beautiful works of art.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import * as React from 'react';\nimport { css } from 'astroturf';\n\nfunction Button({ children, ...props }) {\n  return (\n    <button\n      {...props}\n      css={css\\`\n        color: blue;\n        border: 1px solid blue;\n        padding: 0 1rem;\n      \\`}\n    >\n      {children}\n    </button>\n  );\n}\n`}</code></pre>\n    <p>{`Additional `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` props are automically combined with the provided css\nwith no additional effort.`}</p>\n    <h2>{`Dynamic Props and You`}</h2>\n    <p>{`While not a \"real\" CSS-in-JS library `}<Brand mdxType=\"Brand\">{`astroturf`}</Brand>{` still provides\na level of dynamic styling you've come to expect from component styling. Individual\nCSS property values can be fully specified at runtime by transpiling interpolations\nto \"CSS Custom Properties\". Use dynamic interpolations anywhere CSS custom properties are\nallowed!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import * as React from 'react';\nimport { css } from 'astroturf';\n\nfunction Button({ bgColor, children }) {\n  return (\n    <button\n      css={css\\`\n        color: black;\n        border: 1px solid black;\n        background-color: \\${bgColor};\n      \\`}\n    >\n      {children}\n    </button>\n  );\n}\n`}</code></pre>\n    <h3>{`Component Variants`}</h3>\n    <p>{`In addition to individual property values, `}<Brand mdxType=\"Brand\">{`astroturf`}</Brand>{` can also create\nlarger component \"variants\" by nesting `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` tags inside the root componnent definition.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import * as React from 'react';\nimport { css } from 'astroturf';\n\nfunction Button({ variant = 'primary', children }) {\n  return (\n    <button\n      css={css\\`\n        border: 1px solid transparent;\n\n        \\${variant === 'primary' &&\n        css\\`\n          color: blue;\n          border-color: blue;\n        \\`}\n      \\`}\n    >\n      {children}\n    </button>\n  );\n}\n`}</code></pre>\n    <p>{`Each inner `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` interpolation compiles to seperate CSS Class Name, and is toggled\nat runtime when the inner expression returns true.`}</p>\n    <h3>{`Cruise Control`}</h3>\n    <p>{`For the discerning consumer who knows what they want, and don't have time to mess\naround, `}<Brand mdxType=\"Brand\">{`astroturf`}</Brand>{` has you covered with `}<Brand mdxType=\"Brand\">{`Instant Components™`}</Brand>{`\nbrought to you by the `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{` helper.`}</p>\n    <p>{`Create components with ease, effortlessly mapping class names to component props:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import * as React from 'react';\nimport { styled } from 'astroturf/react';\n\nconst Button = styled('button')\\`\n  border: 1px solid transparent;\n\n  &.disabled {\n    opacity: 0.6;\n  }\n\n  &.variant-primary {\n    color: blue;\n    border-color: blue;\n  }\n\\`;\n\n<Button variant=\"primary\" disabled />;\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{` helper will infer component props from the nested classes you define.\nCreate boolean props with simple class names, and cover more complex cases using a `}<inlineCode parentName=\"p\">{`-`}</inlineCode>{`\nto differentiate the name from value. `}<inlineCode parentName=\"p\">{`.color-red`}</inlineCode>{` becomes `}<inlineCode parentName=\"p\">{`color=\"red\"`}</inlineCode>{`!`}</p>\n    <p>{`We recommend this pattern for simple cases, where you value less boilerplate over customizability.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
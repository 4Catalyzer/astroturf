{"version":3,"sources":["webpack:///./src/pages/migration.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","Layout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,8CACA,wCACA,sFAAqE,0BAAYC,WAAW,KAAvB,UAArE,oDACmC,0BAAYA,WAAW,KAAvB,mBADnC,uCAEc,0BAAYA,WAAW,KAAvB,aAFd,eAEmF,0BAAYA,WAAW,KAAvB,UAFnF,+CAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,WACd,UAAY,IAHX,2GAQL,sBAAI,0BAAYA,WAAW,MAAvB,OAAJ,OAA4D,0BAAYA,WAAW,MAAvB,eAC5D,kCAAiB,0BAAYA,WAAW,KAAvB,OAAjB,2BAA4F,kBAAIA,WAAW,KAAf,UAA5F,uFAC6C,0BAAYA,WAAW,KAAvB,cAD7C,+DAEoC,0BAAYA,WAAW,KAAvB,OAFpC,uBAGA,wFAAuE,0BAAYA,WAAW,KAAvB,cAAvE,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,WACd,UAAY,IAHX,iFAML,uDACA,wGACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,eAApB,4BACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,OAAgF,0BAAYA,WAAW,MAAvB,eAChF,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,aAApB,OAAkF,0BAAYA,WAAW,MAAvB,kBAClF,kBAAIA,WAAW,MAAf,SAA8B,0BAAYA,WAAW,MAAvB,uBAEhC,6EACA,uHACe,0BAAYA,WAAW,KAAvB,mBADf,4BACuG,0BAAYA,WAAW,KAAvB,WADvG,wHAGc,0BAAYA,WAAW,KAAvB,aAHd,cAGkF,0BAAYA,WAAW,KAAvB,cAHlF,eAGwJ,0BAAYA,WAAW,KAAvB,2BAHxJ,kBAQJJ,EAAWK,gBAAiB","file":"component---src-pages-migration-mdx-66239dac399c3e92afa2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Layout from '../components/Layout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Migrating to v1 (rc)`}</h1>\n    <h2>{`Import Changes`}</h2>\n    <p>{`In order to help folks not using React avoid extra bytes. The `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{` component\nhelper has moved to it's own import: `}<inlineCode parentName=\"p\">{`astroturf/react`}</inlineCode>{`, which re-exports\neverything from `}<inlineCode parentName=\"p\">{`astroturf`}</inlineCode>{` as well as `}<inlineCode parentName=\"p\">{`styled`}</inlineCode>{`. To migrate automatically run the codemod:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\",\n        \"metastring\": \"noFormat\",\n        \"noFormat\": true\n      }}>{`npm install -g @codemod/cli\n\ncodemod --plugin astroturf/codemods/rename-styled-import [your files]\n`}</code></pre>\n    <h2><inlineCode parentName=\"h2\">{`css`}</inlineCode>{` to `}<inlineCode parentName=\"h2\">{`stylesheet`}</inlineCode></h2>\n    <p>{`In v1 the `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` tag will now produce a `}<em parentName=\"p\">{`single`}</em>{` css class instead of a stylesheet.\nThe old behavior is still useful, so a new tag `}<inlineCode parentName=\"p\">{`stylesheet`}</inlineCode>{` has been added that\nfunctions exactly the same way as the `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` tag pre version 1.`}</p>\n    <p>{`There is a codemod that will convert any non-css prop usages to `}<inlineCode parentName=\"p\">{`stylesheet`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\",\n        \"metastring\": \"noFormat\",\n        \"noFormat\": true\n      }}>{`codemod --plugin astroturf/codemods/convert-css-to-stylesheet [your files]\n`}</code></pre>\n    <h2>{`New Option names and defaults`}</h2>\n    <p>{`The astroturf options have been changed to be clearer and with better defaults.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`allowGlobal`}</inlineCode>{` is now false by default`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tagName`}</inlineCode>{` -> `}<inlineCode parentName=\"li\">{`cssTagName`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`styledTag`}</inlineCode>{` -> `}<inlineCode parentName=\"li\">{`styledTagName`}</inlineCode></li>\n      <li parentName=\"ul\">{`added `}<inlineCode parentName=\"li\">{`stylesheetTagName`}</inlineCode></li>\n    </ul>\n    <h2>{`Extracted styles are imported with es module syntax`}</h2>\n    <p>{`To be in a better place for tooling and optimizations astroturf now compiles\nstyle imports to `}<inlineCode parentName=\"p\">{`import ... from`}</inlineCode>{` instead of the CommonJs `}<inlineCode parentName=\"p\">{`require`}</inlineCode>{`. This fixes\na few CSS ordering issues as well. There is no migratin step needed, but we recommend\nyou also enable `}<inlineCode parentName=\"p\">{`esmodules`}</inlineCode>{` option on `}<inlineCode parentName=\"p\">{`css-loader`}</inlineCode>{` as well as `}<inlineCode parentName=\"p\">{`mini-extract-css-plugin`}</inlineCode>{` for webpack.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{s5ye:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return a})),t.d(n,"default",(function(){return i}));t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("91GP"),t("q1tI");var s=t("7ljp"),o=t("soUV");var a={},r={_frontmatter:a},l=o.a;function i(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,s,o={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["components"]);return Object(s.b)(l,Object.assign({},r,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h2",null,"Attaching Additional Props"),Object(s.b)("p",null,"A common task with styled components is to map their props or set default values.\nastroturf cribs from Styled Components, by including an ",Object(s.b)("inlineCode",{parentName:"p"},"attrs()")," api."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"import styled from 'astroturf/react';\n\n// Provide a default `type` props\nconst PasswordInput = styled('input').attrs({\n  type: 'password',\n})`\n  background-color: #ccc;\n`;\n\n// Map the incoming props to a new set of props\nconst TextOrPasswordInput = styled('input').attrs(\n  ({ isPassword, ...props }) => ({\n    ...props,\n    type: isPassword ? 'password' : 'text',\n  }),\n)`\n  background-color: #ccc;\n`;\n")),Object(s.b)("p",null,"Because ",Object(s.b)("inlineCode",{parentName:"p"},"attrs()")," is resolved during render you can use hooks in them! We even\ndo some magic in the non-function signature so that it works."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const Link = styled('a').attrs((props) => ({\n  href: useRouter().createHref(props.to),\n}))`\n  color: blue;\n`;\n\n// astroturf will automatically compile to a function\n// when using a plain object so that the hooks\n// are only evaluated during render\nconst Link = styled(MyLink).attrs({\n  router: useRouter(),\n})`\n  color: blue;\n`;\n")),Object(s.b)("h2",null,'"as" prop'),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"astroturf")," supports the ",Object(s.b)("inlineCode",{parentName:"p"},"as")," prop to control the underlying element type at runtime."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"noFormat",noFormat:!0}),'const Button = styled(\'button\')`\n  color: red;\n`;\n\n<Button as="a" href="#link" />;\n')),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"This feature is only enabled by default for host components"),", e.g. native DOM elements.\nWe do this to prevent annoying conflicts with other UI libraries like react-bootstrap or\nsemantic-ui which also use the the ",Object(s.b)("inlineCode",{parentName:"p"},"as")," prop. If you want to enable it for any styled\ncomponent you can do so via the ",Object(s.b)("inlineCode",{parentName:"p"},"allowAs")," option."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const StyledFooter = styled(Footer, { allowAs: true })`\n  color: red;\n`;\n")),Object(s.b)("h2",null,"Class composition"),Object(s.b)("p",null,"How you accomplish that is mostly up to your preprocessor. Leverage Sass variables,\nor Less mixins, or postcss nesting polyfills, or whatever. The css you're writing\nis treated exactly like a normal style file so all the tooling you're used to works as expected.\nFor composition, specifically around classes, you can also use\ncss-modules ",Object(s.b)("inlineCode",{parentName:"p"},"composes")," to compose styles and interpolation;"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"// Button.js\n\nconst heavy = css`\n  font-weight: 900;\n`;\n\nconst Title = styled('h3')`\n  composes: ${heavy};\n\n  font-size: 12%;\n`;\n")),Object(s.b)("p",null,"You don't have to define everything in a ",Object(s.b)("inlineCode",{parentName:"p"},".js")," file. Where it makes sense\njust use normal css (or any other file type)."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-scss"}),"// mixins.scss\n@mixin heavy() {\n  font-weight: 900;\n}\n")),Object(s.b)("p",null,"and then:"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"// Button.js\nconst Title = styled('h3')`\n  @import './mixins.scss';\n\n  @include heavy();\n  font-size: 12%;\n`;\n")),Object(s.b)("h2",null,"Referring to other Components"),Object(s.b)("p",null,"One limitation to fully encapsulated styles is that it's hard to contextually style components\nwithout them referencing each other. In astroturf you can use a component in a\nselector as if it were referencing a class selector."),Object(s.b)("blockquote",null,Object(s.b)("p",{parentName:"blockquote"},"Note: Referencing stylesheets or styled components from other files has a few caveats:\n",Object(s.b)("a",Object.assign({parentName:"p"},{href:"cross-file-dependencies"}),"cross-file-dependencies"))),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const Link = styled('a')`\n  display: flex;\n  align-items: center;\n  padding: 5px 10px;\n  background: papayawhip;\n  color: palevioletred;\n`;\n\nconst Icon = styled('svg')`\n  flex: none;\n  transition: fill 0.25s;\n  width: 48px;\n  height: 48px;\n\n  ${Link}:hover & {\n    fill: rebeccapurple;\n  }\n`;\n")),Object(s.b)("h2",null,"Sharing values between styles and JavaScript"),Object(s.b)("p",null,"We've found that in practice, you rarely have to share values between the two, but there are times when it's\nvery convenient. Astroturf ofters two ways to do this, the first is string interpolations."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const DURATION = 500;\n\nconst ColorTransition = styled('nav')`\n  color: red;\n  transition: color ${DURATION}ms;\n\n  &.blue {\n    color: blue;\n  }\n`;\n\nclass App extends React.Component {\n  state = { blue: false };\n  toggle = () => {\n    this.setState(\n      (s) => ({ blue: !s.blue }),\n      () => {\n        setTimeout(() => console.log('done!'), DURATION);\n      },\n    );\n  };\n\n  render() {\n    const { blue } = this.state;\n    return (\n      <div>\n        <ColorTransition blue={blue} />\n        <button onClick={this.toggle}>Toggle Color</button>\n      </div>\n    );\n  }\n}\n")),Object(s.b)("p",null,"This works great for local variables, since the compiler can determine their\nvalue at compile time and share them. For cases when you want to share things\na bit more globally, such as in a theme, we recommend leaning on your css preprocesser again."),Object(s.b)("p",null,"css-modules provides a syntax for exporting values from styles, generally\nthis is used for class names, but you can leverage it for whatever values you want.\nCombined with something like Sass's variables it ends up being a powerful tool."),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const breakpointValues = css`\n  @import '../styles/theme';\n\n  :export {\n    @each $breakpoint, $px in $grid-breakpoints {\n      #{$breakpoint}: $px;\n    }\n  }\n`;\n\nfunction Responsive() {\n  const [isMobile, setIsMobile] = useState(false);\n\n  useLayoutEffect(() => {\n    setIsMobile(window.clientWidth < parseInt(breakpoints.md, 10));\n  }, []);\n\n  return <div>{isMobile ? 'A small screen!' : 'A big screen!'}</div>;\n}\n")),Object(s.b)("h2",null,"Keyframes and global"),Object(s.b)("p",null,"Everything in ",Object(s.b)("inlineCode",{parentName:"p"},"css")," will be used as normal CSS Modules styles.\nSo, if you need to insert some CSS without isolation (like reset with ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/csstools/postcss-normalize"}),"postcss-normalize"),"):"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"css`\n  @import-normalize;\n\n  :global(.btn) {\n    background: blue;\n  }\n`;\n")),Object(s.b)("p",null,"With ",Object(s.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/postcss/postcss-nested"}),"postcss-nested")," you can\nadd keyframes to specific component (and keyframes name will not be global):"),Object(s.b)("pre",null,Object(s.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const Loader = styled('div')`\n  animation-name: rotation;\n  animation-duration: 1s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n\n  @keyframes rotation {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n")))}i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-advanced-mdx-353ca7b37e44e1df45fe.js.map
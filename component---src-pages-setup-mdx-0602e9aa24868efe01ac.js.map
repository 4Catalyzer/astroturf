{"version":3,"sources":["webpack:///./src/pages/setup.mdx"],"names":["name","_frontmatter","Brand","props","console","warn","layoutProps","MDXLayout","Layout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-setup-mdx-0602e9aa24868efe01ac.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Layout from '../components/Layout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Brand = makeShortcode(\"Brand\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = Layout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Getting set up`}</h1>\n    <Brand mdxType=\"Brand\">astroturf</Brand> is quick and easy to get going with. webpack is the tool\nof choice when it comes to astroturf, but we do have options if it's not your cup\nof tea.\n    <h3>{`Basic configuration`}</h3>\n    <p>{`This is all the webpack setup necessary:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"noFormat\",\n        \"noFormat\": true\n      }}>{`{\n  module: {\n    rules: [\n      {\n        test: /\\\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\\\.jsx?$/,\n        use: ['babel-loader', 'astroturf/loader'],\n      },\n    ],\n  }\n}\n`}</code></pre>\n    <p>{`Simply add the `}<inlineCode parentName=\"p\">{`astroturf/loader`}</inlineCode>{` to the end of your JavaScript or TypeScript loader\nchain and you are ready to get compilin'!`}</p>\n    <p>{`If you want to use astroturf with a CSS preprocessor, just tweak an option to output\nthe file type of your choice. Here's an example using Sass:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"noFormat\",\n        \"noFormat\": true\n      }}>{`{\n  module: {\n    rules: [\n      {\n        test: /\\\\.scss$/,\n        use: ['style-loader', 'css-loader', 'sass-loader'],\n      },\n      {\n        test: /\\\\.jsx?$/,\n        use: [\n          'babel-loader',\n          {\n            loader: 'astroturf/loader',\n            options: { extension: '.module.scss' },\n          },\n        ],\n      },\n    ],\n  }\n}\n`}</code></pre>\n    <p>{`Becauase astroturf outputs CSS modules, it's best to use a `}<inlineCode parentName=\"p\">{`.module.*`}</inlineCode>{` extension. This\nautomatically tells webpack's `}<inlineCode parentName=\"p\">{`css-loader`}</inlineCode>{` to process the stlyes correctly and expose the\nclass names as exports for JS files. You can use whatever extension you like though, but\nmay need to manually configure CSS modules elsewhere.`}</p>\n    <Brand mdxType=\"Brand\">astroturf</Brand> is right-sized for you and your needs. Quickly tweak behavior\nbased on easy to use configuration options.\n    <h2>{`Options`}</h2>\n    <p>{`Most options are available anywhere `}<Brand mdxType=\"Brand\">{`astroturf`}</Brand>{` is used. Specify them\nvia your `}<inlineCode parentName=\"p\">{`webpack.config`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`babelrc`}</inlineCode>{` depending on use and need.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`extension`}</strong>{`: (default: `}<inlineCode parentName=\"p\">{`'.module.css'`}</inlineCode>{`) the extension used for extracted style files. `}<inlineCode parentName=\"p\">{`extension`}</inlineCode>{` generally informs the\nflavor of CSS used (Sass, Less, etc) for the CLI or bundler to further process to plain css.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`stylesheetTagName`}</strong>{`: (default: `}<inlineCode parentName=\"p\">{`'stylesheet'`}</inlineCode>{`) The tag identifier used to '\nlocate inline stylesheets declarations.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`cssTagName`}</strong>{`: (default: `}<inlineCode parentName=\"p\">{`'css'`}</inlineCode>{`) The tag identifier used to locate inline\ncss literals and extract them.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`styledTagName`}</strong>{`: (default: `}<inlineCode parentName=\"p\">{`'styled'`}</inlineCode>{`) The tag identifier used to locate components.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`enableCssProp`}</strong>{`: (default: `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`) compiles `}<Brand mdxType=\"Brand\">{`React.JSâ„¢`}</Brand>{` `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{`\ncomponent props to styled components.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`enableDynamicInterpolations`}</strong>{`: (default: `}<inlineCode parentName=\"p\">{`'cssProp'`}</inlineCode>{`) enables or disables custom value\ninterpolation, You can disable this feature if you need to target environments that\ndo not support CSS custom properties.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`experiments`}</strong>{`: Opt in to any experimental features we are testing out.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`experiments.modularCssExternals`}</strong>{`: Set the css-modules flavor to `}<a parentName=\"li\" {...{\n              \"href\": \"https://m-css.com/\"\n            }}><inlineCode parentName=\"a\">{`modular-css`}</inlineCode></a>{` which provides\nbetter inter-component referencing than the vanilla css-modules. `}<strong parentName=\"li\">{`requires css-module-loader to be configured`}</strong></li>\n        </ul>\n      </li>\n    </ul>\n    <h2>{`Configuration File`}</h2>\n    <Brand mdxType=\"Brand\">astroturf</Brand> also supports configuration via localized configuration\nfiles. We recommend that dependencies using astroturf use this approach to avoid\nneeding an single application-wide set of configuration options.\n    <p>{`The supported file types are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.astroturfrc`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.astroturfrc.json`}</inlineCode></li>\n    </ul>\n    <p>{`Both are assumed to JSON (with comments don't worry). You can also add configuration\nto the `}<inlineCode parentName=\"p\">{`astroturf`}</inlineCode>{` key in your `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{`.`}</p>\n    <h2>{`Other Tools`}</h2>\n    <h3>{`Use with Parcel`}</h3>\n    <p>{`Add these lines to `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` to work with `}<a parentName=\"p\" {...{\n        \"href\": \"https://parceljs.org/\"\n      }}>{`Parcel`}</a>{` builder:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"noFormat\",\n        \"noFormat\": true\n      }}>{`  \"postcss\": {\n    \"modules\": true,\n    \"plugins\": [\n      \"postcss-nested\"\n    ]\n  },\n  \"babel\": {\n    \"plugins\": [\n      \"astroturf/plugin\"\n    ]\n  },\n`}</code></pre>\n    <h3>{`Use with Rollup`}</h3>\n    <p>{`Add `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/rollup/plugins/tree/master/packages/babel\"\n      }}>{`babel`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/egoist/rollup-plugin-postcss\"\n      }}>{`postcss`}</a>{` plugins to `}<a parentName=\"p\" {...{\n        \"href\": \"https://rollupjs.org/\"\n      }}>{`Rollup`}</a>{` config file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"noFormat\",\n        \"noFormat\": true\n      }}>{`plugins: [\n  babel({\n    plugins: ['astroturf/plugin'],\n  }),\n  postcss({\n    extract: 'app.css',\n    modules: true,\n    plugins: [postcssNested],\n  }),\n];\n`}</code></pre>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://repl.it/@vladshcherbin/rollup-astroturf#rollup.config.js\"\n      }}>{`example repl`}</a></p>\n    <h3>{`Use with Gatsby`}</h3>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/silvenon/gatsby-plugin-astroturf\"\n      }}>{`gatsby-plugin-astroturf`}</a></p>\n    <h3>{`Use with Preact`}</h3>\n    <p>{`Add these lines to `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` to work with `}<a parentName=\"p\" {...{\n        \"href\": \"https://preactjs.com/\"\n      }}>{`Preact`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"noFormat\",\n        \"noFormat\": true\n      }}>{`  \"browser\": {\n    \"react\": \"preact\"\n  },\n`}</code></pre>\n    <h3>{`Use with Next.js`}</h3>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/zeit/next.js/tree/canary/examples/with-astroturf\"\n      }}>{`example`}</a></p>\n    <h3>{`Use without webpack`}</h3>\n    <p>{`If you aren't using webpack and still want to define styles inline, there is a babel preset for quickly configuring astroturf.`}</p>\n    <p>{`Config shown below with the default options.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// babelrc.js\nmodule.exports = {\n  presets: [\n    [\n      'astroturf/preset',\n      {\n        cssTagName: 'css',\n        extension: '.module.css',\n        writeFiles: true, // Writes css files to disk using the result of \\`getFileName\\`\n        getFileName(hostFilePath, pluginsOptions) {\n          const basepath = join(\n            dirname(hostFilePath),\n            basename(hostFilePath, extname(hostFilePath)),\n          );\n          return \\`\\${basepath}__extracted_style\\${opts.extension}\\`;\n        },\n      },\n    ],\n  ],\n};\n`}</code></pre>\n    <p>{`The extracted styles are also available on the `}<inlineCode parentName=\"p\">{`metadata`}</inlineCode>{` object returned from `}<inlineCode parentName=\"p\">{`babel.transform`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { metadata } = babel.transformFile(myJsfile);\n\nmetadata['astroturf'].styles; // [{ path, value }]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}